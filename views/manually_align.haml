#youtube-video-id(style='display:none')= @song.youtube_video_id

<!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
#player(style='height:390px; width:640px; border:1px black solid') Loading...

%button(onclick='save()') Save

%table
  - @song.lines.each_with_index do |line, line_num|
    %tr
      %td
        %div{onclick: "currentLineNum = #{line_num}; highlightCurrentLineNum();"}
          = line.line
      %td{id: "end#{line_num}"}= line.end_millis && line.end_millis / 1000.0

:javascript
  // See https://developers.google.com/youtube/iframe_api_reference

  // 2. This code loads the IFrame Player API code asynchronously.
  var tag = document.createElement('script');

  tag.src = "https://www.youtube.com/iframe_api";
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  // 3. This function creates an <iframe> (and YouTube player)
  //    after the API code downloads.
  var player;
  function onYouTubeIframeAPIReady() {
    player = new YT.Player('player', {
      height: '390',
      width: '640',
      videoId: document.getElementById('youtube-video-id').innerText,
      events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange
      }
    });
  }

  // 4. The API will call this function when the video player is ready.
  function onPlayerReady(event) {
    //event.target.playVideo();
  }

  // 5. The API calls this function when the player's state changes.
  //    The function indicates that when playing a video (state=1),
  //    the player should play for six seconds and then stop.
  var done = false;
  function onPlayerStateChange(event) {
    /*if (event.data == YT.PlayerState.PLAYING && !done) {
      setTimeout(stopVideo, 6000);
      done = true;
    }*/
  }
  function stopVideo() {
    player.stopVideo();
  }

  var currentLineNum = 0;
  function highlightCurrentLineNum() {
    var tdTag = document.getElementById('end' + currentLineNum);
    tdTag.innerHTML = "<-";
  }
  highlightCurrentLineNum();

  var alignments = [];
  function keypress(e) {
    if (e.charCode === 32) { // if space bar
      var time = player.getCurrentTime();
      var tdTag = document.getElementById('end' + currentLineNum);
      tdTag.innerHTML = time;
      if (!alignments[currentLineNum]) {
        alignments[currentLineNum] = {};
      }
      alignments[currentLineNum].endMillis = Math.round(time * 1000);
      currentLineNum += 1;
      highlightCurrentLineNum();
      e.preventDefault();
    }
  }
  function init() {
    document.addEventListener("keypress", keypress);
  }
  document.addEventListener("DOMContentLoaded", init, false);

  function save() {
    var xhr = new XMLHttpRequest();
    xhr.open("POST", window.location, true);
    xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
    xhr.send(JSON.stringify(alignments));
  }

%div(style='float:right')
  %audio(id='player' controls)
    %source(src="/speed-up/#{@song.video.youtube_video_id}.m4a")
  %br
  %button(style='width:200px; height:50px' onclick='save()') Save

%table
  - @song.lines.each_with_index do |line, line_num|
    %tr
      %td{id: "begin#{line_num}"}
      %td
        %div{onclick: "currentLineNum = #{line_num}; highlightCurrentLineNum();"}
          = line.line
      %td{id: "end#{line_num}"}= line.end_millis && line.end_millis / 1000.0
      -#%td
      -#  %audio(controls preload="none")
      -#    %source(src="/excerpt.wav?begin_millis=#{@song.lines[line_num - 1].end_millis}&end_millis=#{line.end_millis}")

:javascript
  var num_lines = #{@song.lines.size};
  var alignments = JSON.parse('#{@song.lines.to_json}');

:javascript
  var currentLineNum = 0;
  function highlightCurrentLineNum() {
    for (var i = 0; i < num_lines; i++) {
      document.getElementById('begin' + i).innerHTML = "";
    }
    document.getElementById('begin' + currentLineNum).innerHTML = "&gt;";
  }
  highlightCurrentLineNum();

  var player = document.getElementById('player');
  function keypress(e) {
    if (e.charCode === 32) { // if space bar
      var time = player.currentTime * 2;
      var tdTag = document.getElementById('end' + currentLineNum);
      tdTag.innerHTML = time;
      if (!alignments[currentLineNum]) {
        alignments[currentLineNum] = {};
      }
      alignments[currentLineNum].end_millis = Math.round(time * 1000);
      currentLineNum += 1;
      highlightCurrentLineNum();
      e.preventDefault();
    } else if (e.charCode == 106) { // if 'j' key
      if (currentLineNum < num_lines - 1) {
        currentLineNum += 1;
      }
      if (alignments[currentLineNum - 1].end_millis) {
        player.currentTime = alignments[currentLineNum - 1].end_millis / 2 / 1000;
      }
      highlightCurrentLineNum();
      e.preventDefault();
    } else if (e.charCode == 107) { // if 'k' key
      if (currentLineNum > 0) {
        currentLineNum -= 1;
      }
      if (alignments[currentLineNum - 1].end_millis) {
        player.currentTime = alignments[currentLineNum - 1].end_millis / 2 / 1000;
      }
      highlightCurrentLineNum();
      e.preventDefault();
    }
  }
  function init() {
    document.addEventListener("keypress", keypress);
  }
  document.addEventListener("DOMContentLoaded", init, false);

  function save() {
    var xhr = new XMLHttpRequest();
    xhr.open("POST", window.location, true);
    xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
    xhr.send(JSON.stringify(alignments));
  }

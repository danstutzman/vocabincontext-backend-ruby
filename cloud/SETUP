Run locally:
  tugboat keys
  tugboat create vocabincontext -k 41226 -s 512MB -r nyc1 -i ubuntu-14-04-x32

set -ex

# See https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-14-04
sudo apt-get install -y ufw
sudo ufw default deny incoming
sudo ufw default allow outgoing
sudo ufw allow ssh
sudo ufw allow http
sudo ufw allow 60001:60010/udp
sudo ufw enable

sudo apt-get install -y mosh

sudo apt-get update
sudo apt-get install -y nginx
sudo apt-get install -y ruby2.0 ruby2.0-dev
sudo apt-get install -y build-essential bison openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libxml2-dev autoconf libc6-dev ncurses-dev automake libtool
sudo gem2.0 install unicorn

id -u web &>/dev/null || useradd web
sudo mkdir -p /var/www/vocabincontext
sudo chown web:web /var/www/vocabincontext
cd /var/www
if [ ! -e vocabincontext ]; then
  sudo sudo -u web git clone https://danstutzman@bitbucket.org/danstutzman/vocabincontext.git
  # Ignore "warning: unable to access '/root/.config/git/attributes': Permission denied"
fi
cd /var/www/vocabincontext
gem2.0 install bundler
#sudo sudo -u web bundle install --path vendor
sudo sudo -u web bundle install --deployment

tee /var/www/vocabincontext/unicorn.rb <<EOF2
user "web", "web"
working_directory "/var/www/vocabincontext"
pid "/var/www/vocabincontext/unicorn.pid"
stderr_path "/var/log/unicorn.log"
stdout_path "/var/log/unicorn.log"
listen "/tmp/unicorn.vocabincontext.sock"
worker_processes 1
timeout 10
preload_app true
EOF2

touch /var/log/unicorn.log
chown web:web /var/log/unicorn.log

# to test out: sudo sudo -u web bundle exec unicorn

sudo rm -f /etc/nginx/sites-available/default

sudo tee /etc/nginx/conf.d/default.conf <<"EOF2"
upstream app {
    server unix:/tmp/unicorn.vocabincontext.sock fail_timeout=0;
}

server {
    listen 80;
    server_name digitalocean.vocabincontext.com;
    root /var/www/vocabincontext/public;
    try_files $uri/index.html $uri @app;
    location @app {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_pass http://app;
    }
    error_page 500 502 503 504 /500.html;
    client_max_body_size 4G;
    keepalive_timeout 10;
}  
EOF2

sudo tee /etc/init.d/unicorn <<"EOF2"
#!/bin/bash -e
TIMEOUT=30
APP_NAME=vocabincontext
APP_ROOT=/var/www/vocabincontext
PID=/var/www/vocabincontext/unicorn.pid
CMD="cd $APP_ROOT && bundle exec unicorn -c $APP_ROOT/unicorn.rb -E production -D"
USER=web
action="$1"
set -u

old_pid="$PID.oldbin"

cd $APP_ROOT || exit 1

sig () {
  test -s "$PID" && kill -$1 `cat $PID`
}

oldsig () {
  test -s $old_pid && kill -$1 `cat $old_pid`
}

workersig () {
  workerpid="/tmp/unicorn.$APP_NAME.$2.pid"
  test -s "$workerpid" && kill -$1 `cat $workerpid`
}

case $action in
start)
  sig 0 && echo >&2 "Already running" && exit 0
  su - $USER -c "$CMD"
  ;;
stop)
  sig QUIT && exit 0
  echo >&2 "Not running"
  ;;
force-stop)
  sig TERM && exit 0
  echo >&2 "Not running"
  ;;
restart|reload)
  sig HUP && echo reloaded OK && exit 0
  echo >&2 "Couldn't reload, starting '$CMD' instead"
  su - $USER -c "$CMD"
  ;;
upgrade)
  if sig USR2 && sleep 20 && sig 0 && oldsig QUIT
  then
    n=$TIMEOUT
    while test -s $old_pid && test $n -ge 0
    do
      printf '.' && sleep 1 && n=$(( $n - 1 ))
    done
    echo

    if test $n -lt 0 && test -s $old_pid
    then
      echo >&2 "$old_pid still exists after $TIMEOUT seconds"
      exit 1
    fi
    exit 0
  fi
  echo >&2 "Couldn't upgrade, starting '$CMD' instead"
  su - $USER -c "$CMD"
  ;;
kill_worker)
  workersig QUIT $2 && exit 0
  echo >&2 "Worker not running"
  ;;

reopen-logs)
  sig USR1
  ;;
*)
  echo >&2 "Usage: $0 <start|stop|restart|upgrade|force-stop|reopen-logs>"
  exit 1
  ;;
esac
EOF2

chmod +x /etc/init.d/unicorn
/usr/sbin/update-rc.d -f unicorn defaults
sudo service unicorn stop
sudo service unicorn start
sudo service nginx restart

sudo apt-get install -y postgresql postgresql-client-common libpq-dev
sudo sudo -u postgres createuser -s -e vocabincontext
echo "ALTER USER vocabincontext WITH PASSWORD 'vocabincontext'" | sudo sudo -u postgres psql
